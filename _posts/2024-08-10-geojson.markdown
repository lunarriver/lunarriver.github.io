---
layout: post
title:  "The GeoJSON Format (RFC-7946)"
date:   2024-08-10 11:00:00 +0800
---

* 目录
{:toc #markdown-toc}

GeoJSON is a geospatial data interchange format based on JavaScript Object Notation (JSON). It defines several types of JSON objects and the manner in which they are combined to represent data about geographic features, their properties, and their spatial extents. GeoJSON uses a geographic coordinate reference system, World Geodetic System 1984, and units of decimal degrees. GeoJSON is a format for encoding a variety of geographic data structures.

## 1 Introduction

A GeoJSON object may represent:
- a region of space (a Geometry)
- a spatially bounded entity (a Feature)
- or a list of Features (a FeatureCollection)

GeoJSON supports the following geometry types:
- Point / MultiPoint (0 dimensional)
- LineString / MultiLineString (1 dimensional)
- Polygon / MultiPolygon (2 dimensional)
- and GeometryCollection
  
Features in GeoJSON contain a Geometry object and additional properties.

A FeatureCollection contains a list of Features.

```
{
    "type": "FeatureCollection",
    "features": [{
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [102.0, 0.5]
            },
            "properties": {
                "prop0": "value0"
            }
        }, {
            "type": "Feature",
            "geometry": {
                "type": "LineString",
                "coordinates": [
                    [102.0, 0.0],
                    [103.0, 1.0],
                    [104.0, 0.0],
                    [105.0, 1.0]
                ]
            },
            "properties": {
                "prop0": "value0",
                "prop1": 0.0
            }
        }, {
            "type": "Feature",
            "geometry": {
                "type": "Polygon",
                "coordinates": [
                    [
                        [100.0, 0.0],
                        [101.0, 0.0],
                        [101.0, 1.0],
                        [100.0, 1.0],
                        [100.0, 0.0]
                    ]
                ]
            },
            "properties": {
                "prop0": "value0",
                "prop1": {
                    "this": "that"
                }
            }
        }
    ]
}
```

## 2 GsonJSON Text

A GeoJSON text is a JSON text and consists of a single GeoJSON object.

## 3 GeoJSON Object

A GeoJSON object
- is a JSON object.
- has a member with the name "type". The value of the member **MUST** be one of the GeoJSON types.
- MAY have a "bbox" member, the value of which MUST be a bounding box array (see Section 5).
- MAY have other members (see Section 6).

### 3.1 Geometry Object

A Geometry Object
- is a JSON object.
- the value of it's "type" member **MUST** be one of the seven geometry types.
- has a member with the name "coordinates" (except "type" "GeometryCollection").

#### Coordinates

The "coordinates" member of a Geometry object is composed of either:

| Position | Gemotry  |
| ------- | --------------------  |
| one position  | a Point |
| an array of positions  | a LineString or MultiPoint |
| an array of LineString or linear ring  | a Polygon or MultiLineString |
| an array of Polygon  | a MultiPolygon |

A position is an array of numbers. There **MUST** be two or more elements. 
- The first two elements are longitude and latitude. 
- Altitude or elevation MAY be included as an optional third element.

A linear ring is a closed LineString with four or more positions.
- The first and last positions are equivalent
- A linear ring is the boundary of a surface or the boundary of a hole in a surface.
- A linear ring **MUST** follow the right-hand rule with respect to the area it bounds, exterior rings are counterclockwise, and holes are clockwise.

For type "Polygon", the "coordinates" member **MUST** be an array of linear ring coordinate arrays.

For Polygons with more than one of linear rings, the first **MUST** be the exterior ring, and any others **MUST** be interior rings.

#### GeometryCollection

A GeometryCollection has a member with the name "geometries". 

The value of "geometries" is an array. Each element of this array is a GeoJSON Geometry object.

#### Antimeridian Cutting

Any geometry that crosses the antimeridian SHOULD be represented by **cutting it in two**, such that neither part’s representation crosses the antimeridian.

For example, a line extending from 45 degrees N, 170 degrees E across the antimeridian to 45 degrees N, 170 degrees W should be cut in two and represented as a MultiLineString.

```
{
    "type": "MultiLineString",
    "coordinates": [
        [
            [170.0, 45.0], [180.0, 45.0]
        ], [
            [-180.0, 45.0], [-170.0, 45.0]
        ]
    ]
}
```

### 3.2 Feature Object

A Feature object represents a spatially bounded thing.
- has a "type" member with the value "Feature".
- has a "geometry" member, it's value SHALL be a Geometry object or null.
- has a "properties" member, it's value is an object or null.
- may have a "id" member if neccesary, it's value is an JSON string or number.

### 3.3 FeatureCollection Object

A FeatureCollection object has a member with the name "features".

The value of "features" is a JSON array. Each element of the array is a Feature object

## 4 Coordinate Reference System

GeoJSON uses the World Geodetic System 1984 (WGS 84), with longitude and latitude units of decimal **degrees**.

An OPTIONAL third-position element SHALL be the height in **meters** above or below the WGS 84 reference ellipsoid.

## 5 Bounding Box

A GeoJSON object MAY have a member named "bbox" to include information on the coordinate range for its Geometries, Features, or FeatureCollections.

The value of the bbox member MUST be an array of length 2*n, where n is the number of dimensions represented in the contained geometries.

The array is filled with all axes of the most southwesterly point followed by all axes of the more northeasterly point. The axes order of a bbox follows the axes order of geometries.

Example of a 2D bbox member on a Feature:

```
{
    "type": "Feature",
    "bbox": [-10.0, -10.0, 10.0, 10.0],
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [-10.0, -10.0],
                [10.0, -10.0],
                [10.0, 10.0],
                [-10.0, -10.0]
            ]
        ]
    }
}
```

Example of a 3D bbox member with a depth of 100 meters:

```
{
    "type": "FeatureCollection",
    "bbox": [100.0, 0.0, -100.0, 105.0, 1.0, 0.0],
    "features": [
        //...
    ]
}
```

### 5.2 The Antimeridian

The latitude of the northeast corner is always **greater than** the latitude of the southwest corner.  but bounding boxes that cross the antimeridian have a northeast corner longitude that is **less than** the longitude of the southwest corner.

Consider a box, it's southwest corner is at 20 degrees S and 177 degrees E, it's northwest corner is at 16 degrees S and 178 degrees W.

The antimeridian-spanning GeoJSON bounding box for this box covers 5 degrees of longitude: 

```
"bbox": [177.0, -20.0, -178.0, -16.0]
```

The complementary bounding box for the same latitude band, not crossing the antimeridian, covers 355 degrees of longitude:

```
"bbox": [-178.0, -20.0, 177.0, -16.0]
```

### 5.3 The Poles

A bounding box that contains the North Pole: 

```
"bbox": [-180.0, minlat, 180.0, 90.0]
```

Viewed on a globe, this bounding box approximates a spherical cap bounded by the "minlat" circle of latitude.

A bounding box that just touches the North Pole:

```
"bbox": [westlon, minlat, eastlon, 90.0]
```

Viewed on a globe, this bounding box forms a slice of an approximate spherical cap when 

Similarly, a bounding box that contains the South Pole:

```
"bbox": [-180.0, -90.0, 180.0, maxlat]
```

A bounding box that just touches the South Pole:

```
"bbox": [westlon, -90.0, eastlon, maxlat]
```

## 6 Extending GeoJSON

Members not described in this specification ("foreign members") MAY be used in a GeoJSON document.

When the value of a foreign member is an object, all the descendant members of that object are themselves foreign members.

GeoJSON semantics do not apply to foreign members and their descendants, regardless of their names and values.